import bodyParser from 'body-parser';
import fs from 'fs';

export default function (app) {
  app.set('port', process.env.PORT || 3000);
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));
}

/**
 * TBD: middleware that checks the request body and querystring against the
 * existing json configuration in order to ensure that:
 * all required parameters are present
 * all parameters are of the correct type
 * non-existing parameters are blocked
 *
 * @throws throw a 400 code error with a relevant error message
 *
 * @param {object} req request object generated by express
 * @param {object} res response object generated by express
 * @param {function} next middleware function
 */
export const checkAgainstRules = (req, res, next) => {
   // Read 'rules.json'
   const rules = JSON.parse(fs.readFileSync('lib/middleware/rules.json'));
   // Check if the rules cover this path and this method 
   if (rules.paths[req.baseUrl + req.path] && rules.paths[req.baseUrl + req.path][req.method.toLowerCase()]) {
     // Check if the rules don't permit any parameters
     if (!rules.paths[req.baseUrl + req.path][req.method.toLowerCase()].parameters) {
       // Throw 400 error if the request includes any parameters, as they must be extraneous
       if (Object.keys(req.body).length !== 0 || Object.keys(req.query).length !== 0) {
         const error = new Error('400 Bad Request - extraneous parameter');
         error.statusCode = 400;
         throw error;
       }     
     } else {
       // Check if all required params are present
       rules.paths[req.baseUrl + req.path][req.method.toLowerCase()].parameters.forEach(param => {
         if (param.in === "body" && param.schema.required) {
           param.schema.required.forEach(prop => {
             if (!req.body.hasOwnProperty(prop)) {
               const error = new Error('400 Bad Request - required parameter missing');
               error.statusCode = 400;
               throw error;
             }
           })
         }
       })
 
       // Check if there are any parameters in the request body
       if (Object.keys(req.body).length > 0) {
         // Loop through body parameters
         Object.keys(req.body).forEach(key => { 
           // Throw 400 error if parameter is missing from the rules
           if (!rules.paths[req.baseUrl + req.path][req.method.toLowerCase()].parameters[0].schema.properties.hasOwnProperty(key)) {
             const error = new Error('400 Bad Request - extraneous parameter');
             error.statusCode = 400;
             throw error;
           } else {
             // Throw 400 error if parameter's type doesn't match the rules
             switch (rules.paths[req.baseUrl + req.path][req.method.toLowerCase()].parameters[0].schema.properties[key].type) {
               case 'string':
                 if (typeof req.body[key] !== 'string') {
                   const error = new Error('400 Bad Request - incorrect type');
                   error.statusCode = 400;
                   throw error;
                 }
                 break;
               case 'integer':
                 if (!Number.isInteger(req.body[key])) {
                   const error = new Error('400 Bad Request - incorrect type');
                   error.statusCode = 400;
                   throw error;
                 }
                 break;
               case 'array':
                 if (!Array.isArray(req.body[key])) {
                   const error = new Error('400 Bad Request - incorrect type');
                   error.statusCode = 400;
                   throw error;
                 } else {
                   req.body[key].forEach(element => {
                     if (typeof element !== 'string') {
                       const error = new Error('400 Bad Request - incorrect type');
                       error.statusCode = 400;
                       throw error;
                     }
                   })
                 }
                 break;
               default:
                 throw new Error('500 Internal Server Error - invalid type')
             }
           }
         })
       }
       // Check if there are any parameters in the query string
       if (Object.keys(req.query).length > 0) {
         // Make index of parameters and their types
         const types = {};
         rules.paths[req.baseUrl + req.path][req.method.toLowerCase()].parameters.forEach(param => {
           types[param.name] = param.type;
         })
         // Loop through query parameters
         Object.keys(req.query).forEach(key => {
           // Throw 400 error if parameter is missing from the rules
           if (!types.hasOwnProperty(key)) {
             const error = new Error('400 Bad Request - extraneous parameter');
             error.statusCode = 400;
             throw error;
           } else {
             // Throw 400 error if parameter's type doesn't match the rules
             switch (types[key]) {
               case 'string':
                 if (typeof req.query[key] !== 'string') {
                   const error = new Error('400 Bad Request - incorrect type');
                   error.statusCode = 400;
                   throw error;
                 }
                 break;
               case 'integer':
                 if (!Number.isInteger(parseInt(req.query[key]))) {
                   const error = new Error('400 Bad Request - incorrect type');
                   error.statusCode = 400;
                   throw error;
                 }
                 break;
               case 'array':
                 if (!Array.isArray(req.query[key])) {
                   const error = new Error('400 Bad Request - incorrect type');
                   error.statusCode = 400;
                   throw error;
                 } else {
                   req.query[key].forEach(element => {
                     if (typeof element !== 'string') {
                       const error = new Error('400 Bad Request - incorrect type');
                       error.statusCode = 400;
                       throw error;
                     }
                   })
                 }
                 break;
               default:
                 throw new Error('500 Internal Server Error - invalid type')
             }
           }
         });
       }
     }
   }
  return next();
};
